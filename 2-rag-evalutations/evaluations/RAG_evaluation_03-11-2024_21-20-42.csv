,question,answer,retrieved_context,reference,relevance_score,relevance_response,recall_score,recall_response,faithfulness_score,faithfulness_response,response_quality_score
0,What is prompt engineering?,"Prompt engineering is a method for guiding large language models (LLMs) towards desired outcomes without updating their model weights. It involves creating prompts that align with the model's goals and steer its behavior in a specific direction. Prompt engineering can be applied to various tasks, including autoregressive language models, and requires experimentation and heuristics due to the variability among models.","Prompt Engineering, also known as In-Context Prompting, refers to methods for how to communicate with LLM to steer its behavior for desired outcomes without updating the model weights. It is an empirical science and the effect of prompt engineering methods can vary a lot among models, thus requiring heavy experimentation and heuristics.
This post only focuses on prompt engineering for autoregressive language models, so nothing with Cloze tests, image generation or multimodality models. At its core, the goal of prompt engineering is about alignment and model steerability. Check my previous post on controllable text generation.
[My personal spicy take] In my opinion, some prompt engineering papers are not worthy 8 pages long, since those tricks can be explained in one or a few sentences and the rest is all about benchmarking. An easy-to-use and shared benchmark infrastructure should be more beneficial to the community. Iterative prompting or external tool use would not be trivial to set up. Also non-trivial to align the whole research community to adopt it.
Basic Prompting#\nPrompt Engineering | Lil'Log







































Lil'Log






















Posts




Archive




Search




Tags




FAQ




emojisearch.app









      Prompt Engineering
    
Date: March 15, 2023  |  Estimated Reading Time: 21 min  |  Author: Lilian Weng


 


Table of Contents



Basic Prompting

Zero-Shot

Few-shot

Tips for Example Selection

Tips for Example Ordering



Instruction Prompting

Self-Consistency Sampling

Chain-of-Thought (CoT)

Types of CoT prompts

Tips and Extensions


Automatic Prompt Design

Augmented Language Models

Retrieval

Programming Language

External APIs


Citation

Useful Resources

References\nWeng, Lilian. (Mar 2023). Prompt Engineering. Lil’Log. https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/.

Or
@article{weng2023prompt,
  title   = ""Prompt Engineering"",
  author  = ""Weng, Lilian"",
  journal = ""lilianweng.github.io"",
  year    = ""2023"",
  month   = ""Mar"",
  url     = ""https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/""
}
Useful Resources#

OpenAI Cookbook has many in-depth examples for how to utilize LLM efficiently.
LangChain, a library for combining language models with other components to build applications.
Prompt Engineering Guide repo contains a pretty comprehensive collection of education materials on prompt engineering.
learnprompting.org
PromptPerfect
Semantic Kernel\nUse an iterative Monte Carlo search method to improve the best candidates by proposing semantically similar variants via prompts like Generate a variation of the following instruction while keeping the semantic meaning.\n\nInput: ...\n\nOutput:...


To construct chain-of-thought prompts automatically, Shum et al. (2023) suggested augment-prune-select, a three-step process:

Augment: Generate multiple pseudo-chains of thought given question using few-shot or zero-shot CoT prompts;
Prune: Prune pseudo chains based on whether generated answers match ground truths.
Select: Apply a variance-reduced policy gradient strategy to learn the probability distribution over selected examples, while considering the probability distribution over examples as policy and the validation set accuracy as reward.","Prompt Engineering, also known as In-Context Prompting, refers to methods for how to communicate with LLM to steer its behavior for desired outcomes without updating the model weights. It is an empirical science, and the effect of prompt engineering methods can vary a lot among models, thus requiring heavy experimentation and heuristics.",0.8,"{'relevance_score': 0.8, 'total_relevant_statements': 4, 'total_statements_in_context': 5}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.67,"{'faithfulness_score': 0.67, 'total_inferred_claims': 4, 'total_claims': 6}",8
1,What are the basic approaches for prompting a language model?,"The basic approaches for prompting a language model include:

1. Retrieval-based approach, where the model is first retrieved from its knowledge base and then used to generate an answer.
2. Generation-based approach, where the model generates an initial response and then refines it based on user input or feedback.

These two methods are often combined in practice for improved performance.","Augmented Language Models#
A survey on augmented language models by Mialon et al. (2023) has great coverage over multiple categories of language models augmented with reasoning skills and the ability of using external tools. Recommend it.
Retrieval#
Often we need to complete tasks that require latest knowledge after the model pretraining time cutoff or internal/private knowledge base. In that case, the model would not know the context if we don’t explicitly provide it in the prompt. Many methods for Open Domain Question Answering depend on first doing retrieval over a knowledge base and then incorporating the retrieved content as part of the prompt. The accuracy of such a process depends on the quality of both retrieval and generation steps.\nWeng, Lilian. (Mar 2023). Prompt Engineering. Lil’Log. https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/.

Or
@article{weng2023prompt,
  title   = ""Prompt Engineering"",
  author  = ""Weng, Lilian"",
  journal = ""lilianweng.github.io"",
  year    = ""2023"",
  month   = ""Mar"",
  url     = ""https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/""
}
Useful Resources#

OpenAI Cookbook has many in-depth examples for how to utilize LLM efficiently.
LangChain, a library for combining language models with other components to build applications.
Prompt Engineering Guide repo contains a pretty comprehensive collection of education materials on prompt engineering.
learnprompting.org
PromptPerfect
Semantic Kernel\n[19] Zhou et al. “Large Language Models Are Human-Level Prompt Engineers.” ICLR 2023.
[20] Lazaridou et al. “Internet augmented language models through few-shot prompting for open-domain question answering.” arXiv preprint arXiv:2203.05115 (2022).
[21] Chen et al. “Program of Thoughts Prompting: Disentangling Computation from Reasoning for Numerical Reasoning Tasks.” arXiv preprint arXiv:2211.12588 (2022).
[22] Gao et al. “PAL: Program-aided language models.” arXiv preprint arXiv:2211.10435 (2022).
[23] Parisi et al. “TALM: Tool Augmented Language Models” arXiv preprint arXiv:2205.12255 (2022).\n[14] Yao et al. “ReAct: Synergizing reasoning and acting in language models.” ICLR 2023.
[15] Fu et al. “Complexity-based prompting for multi-step reasoning.” arXiv preprint arXiv:2210.00720 (2022).
[16] Wang et al. “Rationale-augmented ensembles in language models.” arXiv preprint arXiv:2207.00747 (2022).
[17] Zhang et al. “Automatic chain of thought prompting in large language models.” arXiv preprint arXiv:2210.03493 (2022).
[18] Shum et al. “Automatic Prompt Augmentation and Selection with Chain-of-Thought from Labeled Data.” arXiv preprint arXiv:2302.12822 (2023).
[19] Zhou et al. “Large Language Models Are Human-Level Prompt Engineers.” ICLR 2023.","Zero-shot and few-shot learning are two of the most basic approaches for prompting the model, pioneered by many LLM papers and commonly used for benchmarking LLM performance.",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 2, 'total_statements_in_context': 8}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 23}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 2, 'total_claims': 4}",8
2,What are the issues in few-shot learning that lead to performance variance?,"The issues in few-shot learning that lead to performance variance include:

1. Bias towards majority labels: Zero-shot and few-shot learning can be biased towards the most common label, leading to poor performance on minority classes.
2. Recency bias: The model may repeat the same label at the end of a sequence, resulting in poor performance on new or unseen data.
3. Common token bias: LLMs tend to produce more common tokens than rare ones, which can lead to poor performance on tasks requiring diverse vocabulary.

These biases can be addressed by calibrating label probabilities output by the model and selecting examples that are semantically similar to the test example using k-NN clustering in the embedding space.","Basic Prompting#
Zero-shot and few-shot learning are two most basic approaches for prompting the model, pioneered by many LLM papers and commonly used for benchmarking LLM performance.
Zero-Shot#
Zero-shot learning is to simply feed the task text to the model and ask for results.
(All the sentiment analysis examples are from SST-2)
Text: i'll bet the video game is a lot more fun than the film.
Sentiment:
Few-shot#
Few-shot learning presents a set of high-quality demonstrations, each consisting of both input and desired output, on the target task. As the model first sees good examples, it can better understand human intention and criteria for what kinds of answers are wanted. Therefore, few-shot learning often leads to better performance than zero-shot. However, it comes at the cost of more token consumption and may hit the context length limit when input and output text are long.
Text: (lawrence bounces) all over the stage, dancing, running, sweating, mopping his face and generally displaying the wacky talent that brought him fame in the first place.
Sentiment: positive\nText: i'll bet the video game is a lot more fun than the film.
Sentiment:
Many studies looked into how to construct in-context examples to maximize the performance and observed that choice of prompt format, training examples, and the order of the examples can lead to dramatically different performance, from near random guess to near SoTA.
Zhao et al. (2021) investigated the case of few-shot classification and proposed that several biases with LLM (they use GPT-3 in the experiments) contribute to such high variance: (1) Majority label bias exists if distribution of labels among the examples is unbalanced; (2) Recency bias refers to the tendency where the model may repeat the label at the end; (3) Common token bias indicates that LLM tends to produce common tokens more often than rare tokens. To conquer such bias, they proposed a method to calibrate the label probabilities output by the model to be uniform when the input string is N/A.
Tips for Example Selection#


Choose examples that are semantically similar to the test example using $k$-NN clustering in the embedding space (Liu et al., 2021)\nReferences#
[1] Zhao et al. “Calibrate Before Use: Improving Few-shot Performance of Language Models.” ICML 2021
[2] Liu et al. “What Makes Good In-Context Examples for GPT-3?” arXiv preprint arXiv:2101.06804 (2021).
[3] Lu et al. “Fantastically Ordered Prompts and Where to Find Them: Overcoming Few-Shot Prompt Order Sensitivity.” ACL 2022
[4] Ye et al. “In-Context Instruction Learning.” arXiv preprint arXiv:2302.14691 (2023).
[5] Su et al. “Selective annotation makes language models better few-shot learners.” arXiv preprint arXiv:2209.01975 (2022).
[6] Rubin et al. “Learning to retrieve prompts for in-context learning.” NAACL-HLT 2022
[7] Wei et al. “Chain of thought prompting elicits reasoning in large language models.” NeurIPS 2022\nMotivated by uncertainty-based active learning, Diao et al. (2023) suggested to identify examples with high disagreement or entropy among multiple sampling trials. Then annotate these examples to be used in few-shot prompts.


Tips for Example Ordering#

A general suggestion is to keep the selection of examples diverse, relevant to the test sample and in random order to avoid majority label bias and recency bias.
Increasing model sizes or including more training examples does not reduce variance among different permutations of in-context examples. Same order may work well for one model but badly for another. When the validation set is limited, consider choosing the order such that the model does not produce extremely unbalanced predictions or being overconfident about its predictions. (Lu et al. 2022)",(1) Majority label bias exists if the distribution of labels among the examples is unbalanced; (2) Recency bias refers to the tendency where the model may repeat the label at the end; (3) Common token bias indicates that LLM tends to produce common tokens more often than rare tokens.,0.8,"{'relevance_score': 0.8, 'total_relevant_statements': 4, 'total_statements_in_context': 9}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 3, 'total_statements_in_reference': 6}",0.67,"{'faithfulness_score': 0.67, 'total_inferred_claims': 3, 'total_claims': 3}",8
3,What is Chain-of-Thought (CoT) prompting?,"Chain-of-Thought (CoT) prompting is a method used to repeatedly prompt a model with follow-up questions to construct the thought process iteratively, using search engine results or IRCoT and ReAct. It combines iterative CoT prompting with queries to Wikipedia APIs for relevant entities and content. There are two main types of CoT prompts: few-shot CoT and automatic chain of thought prompting in large language models.","Self-Ask (Press et al. 2022) is a method to repeatedly prompt the model to ask following-up questions to construct the thought process iteratively. Follow-up questions can be answered by search engine results. Similarly, IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022) and ReAct (Reason + Act; Yao et al. 2023) combines iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content and then add it back into the context.



Fig. 1. How Self-Ask works with external search queries.(Image source: Press et al. 2022).

Tree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, essentially creating a tree structure. The search process can be BFS or DFS while each state is evaluated by a classifier (via a prompt) or majority vote.\nFew-shot CoT. It is to prompt the model with a few demonstrations, each containing manually written (or model-generated) high-quality reasoning chains.\nTypes of CoT prompts#
Two main types of CoT prompting:\n[14] Yao et al. “ReAct: Synergizing reasoning and acting in language models.” ICLR 2023.
[15] Fu et al. “Complexity-based prompting for multi-step reasoning.” arXiv preprint arXiv:2210.00720 (2022).
[16] Wang et al. “Rationale-augmented ensembles in language models.” arXiv preprint arXiv:2207.00747 (2022).
[17] Zhang et al. “Automatic chain of thought prompting in large language models.” arXiv preprint arXiv:2210.03493 (2022).
[18] Shum et al. “Automatic Prompt Augmentation and Selection with Chain-of-Thought from Labeled Data.” arXiv preprint arXiv:2302.12822 (2023).
[19] Zhou et al. “Large Language Models Are Human-Level Prompt Engineers.” ICLR 2023.","Chain-of-thought (CoT) prompting generates a sequence of short sentences to describe reasoning logics step by step, known as reasoning chains or rationales, to eventually lead to the final answer. The benefit of CoT is more pronounced for complicated reasoning tasks, while using large models (e.g., with more than 50B parameters).",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 2, 'total_statements_in_context': 9}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 4, 'total_statements_in_reference': 8}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 2, 'total_claims': 4}",6
4,What are the types of Chain-of-Thought prompts?,"Here are the answers to your questions based on the provided documents:

1. What are the types of Chain-of-Thought prompts?
The types of Chain-of-Thought prompts include:
- Self-Ask (Press et al. 2022)
- IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022)
- ReAct (Reason + Act; Yao et al. 2023)

2. What is the purpose of Tree of Thoughts (Yao et al. 2023)?
Tree of Thoughts extends CoT by decomposing problems into multiple thought steps and generating multiple thoughts per step.

3. How do you construct chain-of-thought prompts automatically?
You can use an iterative Monte Carlo search method to improve the best candidates by proposing semantically similar variants via prompts like Generate a variation of the following instruction while keeping the semantic meaning.

4. What is the three-step process suggested by Shum et al. (2023) for constructing chain-of-thought prompts?
The three-step process includes:
- Augment: Generate multiple pseudo-chains of thought given question using few-shot or zero-shot CoT prompts
- Prune: Prune pseudo chains based on whether generated answers match ground truths
- Select: Apply a variance-reduced policy gradient strategy to learn the probability distribution over selected examples","[14] Yao et al. “ReAct: Synergizing reasoning and acting in language models.” ICLR 2023.
[15] Fu et al. “Complexity-based prompting for multi-step reasoning.” arXiv preprint arXiv:2210.00720 (2022).
[16] Wang et al. “Rationale-augmented ensembles in language models.” arXiv preprint arXiv:2207.00747 (2022).
[17] Zhang et al. “Automatic chain of thought prompting in large language models.” arXiv preprint arXiv:2210.03493 (2022).
[18] Shum et al. “Automatic Prompt Augmentation and Selection with Chain-of-Thought from Labeled Data.” arXiv preprint arXiv:2302.12822 (2023).
[19] Zhou et al. “Large Language Models Are Human-Level Prompt Engineers.” ICLR 2023.\nSelf-Ask (Press et al. 2022) is a method to repeatedly prompt the model to ask following-up questions to construct the thought process iteratively. Follow-up questions can be answered by search engine results. Similarly, IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022) and ReAct (Reason + Act; Yao et al. 2023) combines iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content and then add it back into the context.



Fig. 1. How Self-Ask works with external search queries.(Image source: Press et al. 2022).

Tree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, essentially creating a tree structure. The search process can be BFS or DFS while each state is evaluated by a classifier (via a prompt) or majority vote.\nUse an iterative Monte Carlo search method to improve the best candidates by proposing semantically similar variants via prompts like Generate a variation of the following instruction while keeping the semantic meaning.\n\nInput: ...\n\nOutput:...


To construct chain-of-thought prompts automatically, Shum et al. (2023) suggested augment-prune-select, a three-step process:

Augment: Generate multiple pseudo-chains of thought given question using few-shot or zero-shot CoT prompts;
Prune: Prune pseudo chains based on whether generated answers match ground truths.
Select: Apply a variance-reduced policy gradient strategy to learn the probability distribution over selected examples, while considering the probability distribution over examples as policy and the validation set accuracy as reward.\n[6] Rubin et al. “Learning to retrieve prompts for in-context learning.” NAACL-HLT 2022
[7] Wei et al. “Chain of thought prompting elicits reasoning in large language models.” NeurIPS 2022
[8] Wang et al. “Self-Consistency Improves Chain of Thought Reasoning in Language Models.” ICLR 2023.
[9] Diao et al. “Active Prompting with Chain-of-Thought for Large Language Models.” arXiv preprint arXiv:2302.12246 (2023).
[10] Zelikman et al. “STaR: Bootstrapping Reasoning With Reasoning.” arXiv preprint arXiv:2203.14465 (2022).
[11] Ye & Durrett. “The unreliability of explanations in few-shot in-context learning.” arXiv preprint arXiv:2205.03401 (2022).","Two main types of CoT prompting:

Few-shot CoT: Prompting the model with a few demonstrations, each containing manually written or model-generated reasoning chains.
Zero-shot CoT: Using natural language statements like 'Let's think step by step' to explicitly encourage the model to generate reasoning chains before answering.",0.8,"{'relevance_score': 0.8, 'total_relevant_statements': 4, 'total_statements_in_context': 10}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.8,"{'faithfulness_score': 0.8, 'total_inferred_claims': 4, 'total_claims': 4}",8
5,What are some tips for example selection in few-shot learning?,"For example selection in few-shot learning, some tips include:

- Keeping diverse examples with high disagreement or entropy among multiple sampling trials to avoid majority label bias and recency bias.
- Increasing model sizes or including more training examples does not reduce variance among different permutations of in-context examples.
- Using contrastive learning specific to one training dataset for in-context learning sample selection, as proposed by Rubin et al. (2022).","Motivated by uncertainty-based active learning, Diao et al. (2023) suggested to identify examples with high disagreement or entropy among multiple sampling trials. Then annotate these examples to be used in few-shot prompts.


Tips for Example Ordering#

A general suggestion is to keep the selection of examples diverse, relevant to the test sample and in random order to avoid majority label bias and recency bias.
Increasing model sizes or including more training examples does not reduce variance among different permutations of in-context examples. Same order may work well for one model but badly for another. When the validation set is limited, consider choosing the order such that the model does not produce extremely unbalanced predictions or being overconfident about its predictions. (Lu et al. 2022)\nRubin et al. (2022) proposed to train embeddings via contrastive learning specific to one training dataset for in-context learning sample selection.  Given each training pair $(x, y)$, the quality of one example $e_i$ (formatted input-output pair) can be measured by a conditioned probability assigned by LM: $\text{score}(e_i) = P_\text{LM}(y \mid e_i, x)$. We can identify other examples with top-$k$ and bottom-$k$ scores as positive and negative sets of candidates for every training pair and use that for contrastive learning.


Some researchers tried Q-Learning to do sample selection. (Zhang et al. 2022)


Motivated by uncertainty-based active learning, Diao et al. (2023) suggested to identify examples with high disagreement or entropy among multiple sampling trials. Then annotate these examples to be used in few-shot prompts.


Tips for Example Ordering#\nReferences#
[1] Zhao et al. “Calibrate Before Use: Improving Few-shot Performance of Language Models.” ICML 2021
[2] Liu et al. “What Makes Good In-Context Examples for GPT-3?” arXiv preprint arXiv:2101.06804 (2021).
[3] Lu et al. “Fantastically Ordered Prompts and Where to Find Them: Overcoming Few-Shot Prompt Order Sensitivity.” ACL 2022
[4] Ye et al. “In-Context Instruction Learning.” arXiv preprint arXiv:2302.14691 (2023).
[5] Su et al. “Selective annotation makes language models better few-shot learners.” arXiv preprint arXiv:2209.01975 (2022).
[6] Rubin et al. “Learning to retrieve prompts for in-context learning.” NAACL-HLT 2022
[7] Wei et al. “Chain of thought prompting elicits reasoning in large language models.” NeurIPS 2022\nBasic Prompting#
Zero-shot and few-shot learning are two most basic approaches for prompting the model, pioneered by many LLM papers and commonly used for benchmarking LLM performance.
Zero-Shot#
Zero-shot learning is to simply feed the task text to the model and ask for results.
(All the sentiment analysis examples are from SST-2)
Text: i'll bet the video game is a lot more fun than the film.
Sentiment:
Few-shot#
Few-shot learning presents a set of high-quality demonstrations, each consisting of both input and desired output, on the target task. As the model first sees good examples, it can better understand human intention and criteria for what kinds of answers are wanted. Therefore, few-shot learning often leads to better performance than zero-shot. However, it comes at the cost of more token consumption and may hit the context length limit when input and output text are long.
Text: (lawrence bounces) all over the stage, dancing, running, sweating, mopping his face and generally displaying the wacky talent that brought him fame in the first place.
Sentiment: positive","Choose examples that are semantically similar to the test example using NN clustering in the embedding space. A graph-based approach can also be used, where samples are selected based on their embedding cosine similarity, encouraging the selection of diverse samples.",0.67,"{'relevance_score': 0.67, 'total_relevant_statements': 4, 'total_statements_in_context': 7}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 7}",0.67,"{'faithfulness_score': 0.67, 'total_inferred_claims': 3, 'total_claims': 3}",6
6,What is self-consistency sampling?,"Self-consistency sampling involves repeatedly asking follow-up questions to construct the thought process iteratively, using search engine results or IRCoT/ReAct APIs. This method combines iterative CoT prompting with queries to Wikipedia APIs and adds relevant content back into the context.","Self-Ask (Press et al. 2022) is a method to repeatedly prompt the model to ask following-up questions to construct the thought process iteratively. Follow-up questions can be answered by search engine results. Similarly, IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022) and ReAct (Reason + Act; Yao et al. 2023) combines iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content and then add it back into the context.



Fig. 1. How Self-Ask works with external search queries.(Image source: Press et al. 2022).

Tree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, essentially creating a tree structure. The search process can be BFS or DFS while each state is evaluated by a classifier (via a prompt) or majority vote.\nZhang et al. (2023) instead adopted clustering techniques to sample questions and then generates chains. They observed that LLMs tend to make certain types of mistakes. One type of errors can be similar in the emebedding space and thus get grouped together. By only sampling one or a few from frequent-error clusters, we can prevent too many wrong demonstrations of one error type and collect a diverse set of examples.

Question clustering: Embed questions and run $k$-means for clustering.
Demonstration selection: Select a set of representative questions from each cluster; i.e. one demonstration from one cluster. Samples in each cluster are sorted by distance to the cluster centroid and those closer to the centroid are selected first.
Rationale generation: Use zero-shot CoT to generate reasoning chains for selected questions and construct few-shot prompt to run inference.\nFig. 2. How Self-Ask works with external search queries.(Image source: Yao et al. 2022).
Automatic Prompt Design#
Prompt is a sequence of prefix tokens that increase the probability of getting  desired output given input. Therefore we can treat them as trainable parameters and optimize them directly on the embedding space via gradient descent, such as AutoPrompt (Shin et al., 2020, Prefix-Tuning (Li & Liang (2021)), P-tuning (Liu et al. 2021) and Prompt-Tuning (Lester et al. 2021). This section in my “Controllable Neural Text Generation” post has a good coverage of them. The trend from AutoPrompt to Prompt-Tuning is that the setup gets gradually simplified.
APE (Automatic Prompt Engineer; Zhou et al. 2022) is a method to search over a pool of model-generated instruction candidates and then filters the candidate set according to a chosen score function to ultimately choose the best candidate with highest score.\nEach API call is represented as a tuple of (API name, corresponding input), $c=(a_c, i_c)$ and its corresponding result is denoted as $r$. The API call sequences with and without results are labeled as follows, respectively:

  $$
  \begin{aligned}
  e(c) &= \langle\texttt{API}\rangle a_c(i_c) \langle\texttt{/API}\rangle \\
  e(c, r) &= \langle\texttt{API}\rangle a_c(i_c) \to r \langle\texttt{/API}\rangle
  \end{aligned}
  $$
  


Sample API calls based on the probabilities $p_\text{LM}(\langle\texttt{API}\rangle \mid \text{prompt}(\mathbf{x}), \mathbf{x}_{1:i})$ and select top $k$ candidate positions for doing API calls at position $i$ if the probability is larger than a threshold.",Self-consistency sampling is to sample multiple outputs with temperature > 0 and then select the best one out of these candidates. The general solution is to pick the majority vote.,0.8,"{'relevance_score': 0.8, 'total_relevant_statements': 4, 'total_statements_in_context': 5}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 2, 'total_claims': 4}",6
7,What are some methods for automatic prompt design?,"The methods for automatic prompt design include:

1. Augmented Language Models: Using existing LLMs as the base and adding new prompts to improve performance.
2. Retrieval-based Prompt Design: Searching over a pool of model-generated instruction candidates based on their scores.
3. Programming Language-based Prompt Design: Using programming languages to generate prompts.
4. External APIs: Utilizing external APIs to access additional information or functionality.

These methods can be used individually or in combination to create effective prompt designs for autoregressive language models.","Prompt Engineering | Lil'Log







































Lil'Log






















Posts




Archive




Search




Tags




FAQ




emojisearch.app









      Prompt Engineering
    
Date: March 15, 2023  |  Estimated Reading Time: 21 min  |  Author: Lilian Weng


 


Table of Contents



Basic Prompting

Zero-Shot

Few-shot

Tips for Example Selection

Tips for Example Ordering



Instruction Prompting

Self-Consistency Sampling

Chain-of-Thought (CoT)

Types of CoT prompts

Tips and Extensions


Automatic Prompt Design

Augmented Language Models

Retrieval

Programming Language

External APIs


Citation

Useful Resources

References\nFig. 2. How Self-Ask works with external search queries.(Image source: Yao et al. 2022).
Automatic Prompt Design#
Prompt is a sequence of prefix tokens that increase the probability of getting  desired output given input. Therefore we can treat them as trainable parameters and optimize them directly on the embedding space via gradient descent, such as AutoPrompt (Shin et al., 2020, Prefix-Tuning (Li & Liang (2021)), P-tuning (Liu et al. 2021) and Prompt-Tuning (Lester et al. 2021). This section in my “Controllable Neural Text Generation” post has a good coverage of them. The trend from AutoPrompt to Prompt-Tuning is that the setup gets gradually simplified.
APE (Automatic Prompt Engineer; Zhou et al. 2022) is a method to search over a pool of model-generated instruction candidates and then filters the candidate set according to a chosen score function to ultimately choose the best candidate with highest score.\nPrompt Engineering, also known as In-Context Prompting, refers to methods for how to communicate with LLM to steer its behavior for desired outcomes without updating the model weights. It is an empirical science and the effect of prompt engineering methods can vary a lot among models, thus requiring heavy experimentation and heuristics.
This post only focuses on prompt engineering for autoregressive language models, so nothing with Cloze tests, image generation or multimodality models. At its core, the goal of prompt engineering is about alignment and model steerability. Check my previous post on controllable text generation.
[My personal spicy take] In my opinion, some prompt engineering papers are not worthy 8 pages long, since those tricks can be explained in one or a few sentences and the rest is all about benchmarking. An easy-to-use and shared benchmark infrastructure should be more beneficial to the community. Iterative prompting or external tool use would not be trivial to set up. Also non-trivial to align the whole research community to adopt it.
Basic Prompting#\nWeng, Lilian. (Mar 2023). Prompt Engineering. Lil’Log. https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/.

Or
@article{weng2023prompt,
  title   = ""Prompt Engineering"",
  author  = ""Weng, Lilian"",
  journal = ""lilianweng.github.io"",
  year    = ""2023"",
  month   = ""Mar"",
  url     = ""https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/""
}
Useful Resources#

OpenAI Cookbook has many in-depth examples for how to utilize LLM efficiently.
LangChain, a library for combining language models with other components to build applications.
Prompt Engineering Guide repo contains a pretty comprehensive collection of education materials on prompt engineering.
learnprompting.org
PromptPerfect
Semantic Kernel","Methods like AutoPrompt, Prefix-Tuning, P-Tuning, and Prompt-Tuning treat prompts as trainable parameters and optimize them directly on the embedding space via gradient descent. Another method, Automatic Prompt Engineer (APE), searches over a pool of model-generated instruction candidates and filters them using a score function.",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 2, 'total_statements_in_context': 10}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.75,"{'faithfulness_score': 0.75, 'total_inferred_claims': 4, 'total_claims': 4}",6
8,What are some factors that influence example ordering in few-shot prompting?,"Question: What are some factors that influence example ordering in few-shot prompting?

Answer:

- Diversity and relevance of examples
- Randomization to avoid bias
- Model size and training data quality
- Limited validation set
- Specificity and precision of task requirements
- Avoiding majority label bias and recency bias","References#
[1] Zhao et al. “Calibrate Before Use: Improving Few-shot Performance of Language Models.” ICML 2021
[2] Liu et al. “What Makes Good In-Context Examples for GPT-3?” arXiv preprint arXiv:2101.06804 (2021).
[3] Lu et al. “Fantastically Ordered Prompts and Where to Find Them: Overcoming Few-Shot Prompt Order Sensitivity.” ACL 2022
[4] Ye et al. “In-Context Instruction Learning.” arXiv preprint arXiv:2302.14691 (2023).
[5] Su et al. “Selective annotation makes language models better few-shot learners.” arXiv preprint arXiv:2209.01975 (2022).
[6] Rubin et al. “Learning to retrieve prompts for in-context learning.” NAACL-HLT 2022
[7] Wei et al. “Chain of thought prompting elicits reasoning in large language models.” NeurIPS 2022\nMotivated by uncertainty-based active learning, Diao et al. (2023) suggested to identify examples with high disagreement or entropy among multiple sampling trials. Then annotate these examples to be used in few-shot prompts.


Tips for Example Ordering#

A general suggestion is to keep the selection of examples diverse, relevant to the test sample and in random order to avoid majority label bias and recency bias.
Increasing model sizes or including more training examples does not reduce variance among different permutations of in-context examples. Same order may work well for one model but badly for another. When the validation set is limited, consider choosing the order such that the model does not produce extremely unbalanced predictions or being overconfident about its predictions. (Lu et al. 2022)\nBasic Prompting#
Zero-shot and few-shot learning are two most basic approaches for prompting the model, pioneered by many LLM papers and commonly used for benchmarking LLM performance.
Zero-Shot#
Zero-shot learning is to simply feed the task text to the model and ask for results.
(All the sentiment analysis examples are from SST-2)
Text: i'll bet the video game is a lot more fun than the film.
Sentiment:
Few-shot#
Few-shot learning presents a set of high-quality demonstrations, each consisting of both input and desired output, on the target task. As the model first sees good examples, it can better understand human intention and criteria for what kinds of answers are wanted. Therefore, few-shot learning often leads to better performance than zero-shot. However, it comes at the cost of more token consumption and may hit the context length limit when input and output text are long.
Text: (lawrence bounces) all over the stage, dancing, running, sweating, mopping his face and generally displaying the wacky talent that brought him fame in the first place.
Sentiment: positive\nInstruction Prompting#
The purpose of presenting few-shot examples in the prompt is to explain our intent to the model; in other words, describe the task instruction to the model in the form of demonstrations. However, few-shot can be expensive in terms of token usage and restricts the input length due to limited context length. So, why not just give the instruction directly?
Instructed LM (e.g. InstructGPT, natural instruction) finetunes a pretrained model with high-quality tuples of (task instruction, input, ground truth output) to make LM better understand user intention and follow instruction. RLHF (Reinforcement Learning from Human Feedback) is a common method to do so. The benefit of instruction following style fine-tuning improves the model to be more aligned with human intention and greatly reduces the cost of communication.
When interacting with instruction models, we should describe the task requirement in details, trying to be specific and precise and avoiding say “not do something” but rather specify what to do.
Please label the sentiment towards the movie of the given movie review. The sentiment label should be ""positive"" or ""negative"".","Keep the selection of examples diverse and relevant to the test sample, and in random order to avoid majority label bias and recency bias. Increasing model sizes or including more training examples does not reduce variance among different permutations of in-context examples.",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 2, 'total_statements_in_context': 7}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 7}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 6, 'total_claims': 7}",6
9,How does Tree of Thoughts (ToT) extend Chain of Thought prompting?,"Tree of Thoughts (ToT) extends Chain of Thought prompting by:

1. Decomposing problems into multiple thought steps
2. Generating multiple thoughts per step
3. Using iterative CoT prompting with search engine results or Wikipedia APIs to find relevant entities and content.

Shum et al. (2023) suggests augment-prune-select, a three-step process: 

1. Augment pseudo-chains of thought using few-shot or zero-shot CoT prompts.
2. Prune pseudo chains based on whether generated answers match ground truths.
3. Select examples with the highest probability distribution over selected examples and consider the validation set accuracy as reward.

This approach can improve the best candidates by proposing semantically similar variants via prompts like ""Generate a variation of the following instruction while keeping the semantic meaning.""","Self-Ask (Press et al. 2022) is a method to repeatedly prompt the model to ask following-up questions to construct the thought process iteratively. Follow-up questions can be answered by search engine results. Similarly, IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022) and ReAct (Reason + Act; Yao et al. 2023) combines iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content and then add it back into the context.



Fig. 1. How Self-Ask works with external search queries.(Image source: Press et al. 2022).

Tree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, essentially creating a tree structure. The search process can be BFS or DFS while each state is evaluated by a classifier (via a prompt) or majority vote.\n[14] Yao et al. “ReAct: Synergizing reasoning and acting in language models.” ICLR 2023.
[15] Fu et al. “Complexity-based prompting for multi-step reasoning.” arXiv preprint arXiv:2210.00720 (2022).
[16] Wang et al. “Rationale-augmented ensembles in language models.” arXiv preprint arXiv:2207.00747 (2022).
[17] Zhang et al. “Automatic chain of thought prompting in large language models.” arXiv preprint arXiv:2210.03493 (2022).
[18] Shum et al. “Automatic Prompt Augmentation and Selection with Chain-of-Thought from Labeled Data.” arXiv preprint arXiv:2302.12822 (2023).
[19] Zhou et al. “Large Language Models Are Human-Level Prompt Engineers.” ICLR 2023.\n[6] Rubin et al. “Learning to retrieve prompts for in-context learning.” NAACL-HLT 2022
[7] Wei et al. “Chain of thought prompting elicits reasoning in large language models.” NeurIPS 2022
[8] Wang et al. “Self-Consistency Improves Chain of Thought Reasoning in Language Models.” ICLR 2023.
[9] Diao et al. “Active Prompting with Chain-of-Thought for Large Language Models.” arXiv preprint arXiv:2302.12246 (2023).
[10] Zelikman et al. “STaR: Bootstrapping Reasoning With Reasoning.” arXiv preprint arXiv:2203.14465 (2022).
[11] Ye & Durrett. “The unreliability of explanations in few-shot in-context learning.” arXiv preprint arXiv:2205.03401 (2022).\nUse an iterative Monte Carlo search method to improve the best candidates by proposing semantically similar variants via prompts like Generate a variation of the following instruction while keeping the semantic meaning.\n\nInput: ...\n\nOutput:...


To construct chain-of-thought prompts automatically, Shum et al. (2023) suggested augment-prune-select, a three-step process:

Augment: Generate multiple pseudo-chains of thought given question using few-shot or zero-shot CoT prompts;
Prune: Prune pseudo chains based on whether generated answers match ground truths.
Select: Apply a variance-reduced policy gradient strategy to learn the probability distribution over selected examples, while considering the probability distribution over examples as policy and the validation set accuracy as reward.","Tree of Thoughts (ToT) extends CoT by exploring multiple reasoning possibilities at each step, creating a tree structure. The search process can be BFS or DFS, while each state is evaluated by a classifier or majority vote.",0.8,"{'relevance_score': 0.8, 'total_relevant_statements': 4, 'total_statements_in_context': 5}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 3, 'total_claims': 6}",8
10,What is the role of instruction prompting in language models?,"The role of instruction prompting in language models is to increase the probability of getting desired output given input by optimizing a sequence of prefix tokens directly on the embedding space via gradient descent, making them trainable parameters. This process can be simplified over time with methods like AutoPrompt and Prompt-Tuning.","Fig. 2. How Self-Ask works with external search queries.(Image source: Yao et al. 2022).
Automatic Prompt Design#
Prompt is a sequence of prefix tokens that increase the probability of getting  desired output given input. Therefore we can treat them as trainable parameters and optimize them directly on the embedding space via gradient descent, such as AutoPrompt (Shin et al., 2020, Prefix-Tuning (Li & Liang (2021)), P-tuning (Liu et al. 2021) and Prompt-Tuning (Lester et al. 2021). This section in my “Controllable Neural Text Generation” post has a good coverage of them. The trend from AutoPrompt to Prompt-Tuning is that the setup gets gradually simplified.
APE (Automatic Prompt Engineer; Zhou et al. 2022) is a method to search over a pool of model-generated instruction candidates and then filters the candidate set according to a chosen score function to ultimately choose the best candidate with highest score.\n[19] Zhou et al. “Large Language Models Are Human-Level Prompt Engineers.” ICLR 2023.
[20] Lazaridou et al. “Internet augmented language models through few-shot prompting for open-domain question answering.” arXiv preprint arXiv:2203.05115 (2022).
[21] Chen et al. “Program of Thoughts Prompting: Disentangling Computation from Reasoning for Numerical Reasoning Tasks.” arXiv preprint arXiv:2211.12588 (2022).
[22] Gao et al. “PAL: Program-aided language models.” arXiv preprint arXiv:2211.10435 (2022).
[23] Parisi et al. “TALM: Tool Augmented Language Models” arXiv preprint arXiv:2205.12255 (2022).\n[6] Rubin et al. “Learning to retrieve prompts for in-context learning.” NAACL-HLT 2022
[7] Wei et al. “Chain of thought prompting elicits reasoning in large language models.” NeurIPS 2022
[8] Wang et al. “Self-Consistency Improves Chain of Thought Reasoning in Language Models.” ICLR 2023.
[9] Diao et al. “Active Prompting with Chain-of-Thought for Large Language Models.” arXiv preprint arXiv:2302.12246 (2023).
[10] Zelikman et al. “STaR: Bootstrapping Reasoning With Reasoning.” arXiv preprint arXiv:2203.14465 (2022).
[11] Ye & Durrett. “The unreliability of explanations in few-shot in-context learning.” arXiv preprint arXiv:2205.03401 (2022).\n[14] Yao et al. “ReAct: Synergizing reasoning and acting in language models.” ICLR 2023.
[15] Fu et al. “Complexity-based prompting for multi-step reasoning.” arXiv preprint arXiv:2210.00720 (2022).
[16] Wang et al. “Rationale-augmented ensembles in language models.” arXiv preprint arXiv:2207.00747 (2022).
[17] Zhang et al. “Automatic chain of thought prompting in large language models.” arXiv preprint arXiv:2210.03493 (2022).
[18] Shum et al. “Automatic Prompt Augmentation and Selection with Chain-of-Thought from Labeled Data.” arXiv preprint arXiv:2302.12822 (2023).
[19] Zhou et al. “Large Language Models Are Human-Level Prompt Engineers.” ICLR 2023.","Instruction prompting involves directly giving instructions to the model to describe the task requirement in detail. This approach is used to reduce token consumption, improve alignment with human intent, and reduce the cost of communication.",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 4, 'total_statements_in_context': 20}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 20}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 2, 'total_claims': 4}",6
11,"What is the InstructGPT model, and how does it differ from traditional models?","The InstructGPT model is a type of large language model (LLM) developed by OpenAI, designed for conversational dialogue and task-oriented tasks. It differs from traditional models in its ability to understand context and respond accordingly, allowing for more human-like conversation. Unlike traditional LLMs that rely on pre-defined responses, InstructGPT can generate text based on user input, enabling more flexible and adaptive communication.","Weng, Lilian. (Mar 2023). Prompt Engineering. Lil’Log. https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/.

Or
@article{weng2023prompt,
  title   = ""Prompt Engineering"",
  author  = ""Weng, Lilian"",
  journal = ""lilianweng.github.io"",
  year    = ""2023"",
  month   = ""Mar"",
  url     = ""https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/""
}
Useful Resources#

OpenAI Cookbook has many in-depth examples for how to utilize LLM efficiently.
LangChain, a library for combining language models with other components to build applications.
Prompt Engineering Guide repo contains a pretty comprehensive collection of education materials on prompt engineering.
learnprompting.org
PromptPerfect
Semantic Kernel\nFig. 4. The format of API calls in TALM. (Image source: Parisi et al. 2022).
TALM adopts a self-play approach to iteratively bootstrap the dataset of tool use examples and finetune LM with it. This self-play, defined as a model interacting with a tool API, iteratively expands the dataset based on whether a newly added tool API can improve the model outputs. Same idea is adopted in Toolformer too, described in more details below. The pipeline loosely mimics a RL process where LM is the policy network and it is trained by policy gradient with a binary reward signal.

Fig. 5. Self-play iterations help boost the model performance.(Image source: Parisi et al. 2022).
Toolformer (Schick et al. 2023) is a LM that can use external tools via simple APIs, which is built in a self-supervised manner and only requires a handful of demonstrations for each API. The toolbox of Toolformer includes:\nFine-tune LM on this annotated dataset. The new training sequences are constructed as $\mathbf{x}^* = x_{1:i-1}, e(c_i, r_i), x_{i:n}$ . The training data is a combination of the original dataset (e.g. a subset of CCNet, as in the paper) and its augmented version.


At inference time, decoding runs until the model produces “$\to$ "" token, indicating that it is expecting response from an API call next.
Toolformer currently does not support tool use in a chain (i.e. using the output of one tool as an input for another tool) or in an interactive way (i.e. adopt API response after human selection). Both are interesting future directions to expand the model for.
Citation#
Cited as:

Weng, Lilian. (Mar 2023). Prompt Engineering. Lil’Log. https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/.\nPrompt Engineering, also known as In-Context Prompting, refers to methods for how to communicate with LLM to steer its behavior for desired outcomes without updating the model weights. It is an empirical science and the effect of prompt engineering methods can vary a lot among models, thus requiring heavy experimentation and heuristics.
This post only focuses on prompt engineering for autoregressive language models, so nothing with Cloze tests, image generation or multimodality models. At its core, the goal of prompt engineering is about alignment and model steerability. Check my previous post on controllable text generation.
[My personal spicy take] In my opinion, some prompt engineering papers are not worthy 8 pages long, since those tricks can be explained in one or a few sentences and the rest is all about benchmarking. An easy-to-use and shared benchmark infrastructure should be more beneficial to the community. Iterative prompting or external tool use would not be trivial to set up. Also non-trivial to align the whole research community to adopt it.
Basic Prompting#","InstructGPT finetunes a pretrained model with high-quality tuples of (task instruction, input, ground truth output) to improve alignment with user intention and follow instructions more accurately. RLHF (Reinforcement Learning from Human Feedback) is commonly used for this fine-tuning.",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 2, 'total_statements_in_context': 6}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 2, 'total_claims': 4}",8
12,How does Chain-of-Thought (CoT) prompting benefit reasoning tasks?,"Here are the answers to your questions:

1. How does Chain-of-Thought (CoT) prompting benefit reasoning tasks?

Chain-of-Thought (CoT) prompting benefits reasoning tasks by generating a sequence of short sentences to describe reasoning logics step by step, known as reasoning chains or rationales, leading to the final answer.

2. What is the difference between Self-Ask and IRCoT?

Self-Ask and IRCoT are both methods that combine iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content.

3. How does Tree of Thoughts (Yao et al.) extend CoT?

Tree of Thoughts extends CoT by decomposing the problem into multiple thought steps, generating multiple thoughts per step, creating a tree structure, and evaluating each state using a classifier or majority vote.

4. What is few-shot CoT?

Few-shot CoT prompts the model with a few demonstrations, each containing manually written high-quality reasoning chains.

5. How does Shum et al.'s (2023) augment-prune-select process work?

Shum et al.'s augment-prune-select process involves generating multiple pseudo-chains of thought using few-shot or zero-shot CoT prompts, pruning the pseudo-chains based on whether generated answers match ground truths, and selecting the best example using a variance-reduced policy gradient strategy.

6. What is Self-Consistency Sampling?

Self-Consistency Sampling is a method to sample multiple outputs with temperature > 0 and then selecting the best one out of these candidates.

7. How does Chain-of-Thought (CoT) prompting work for sentiment classification tasks?

Chain-of-Thought CoT prompts generate a sequence of short sentences to describe reasoning logics step by step, leading to the final answer, which can be used for sentiment classification tasks.","Self-Ask (Press et al. 2022) is a method to repeatedly prompt the model to ask following-up questions to construct the thought process iteratively. Follow-up questions can be answered by search engine results. Similarly, IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022) and ReAct (Reason + Act; Yao et al. 2023) combines iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content and then add it back into the context.



Fig. 1. How Self-Ask works with external search queries.(Image source: Press et al. 2022).

Tree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, essentially creating a tree structure. The search process can be BFS or DFS while each state is evaluated by a classifier (via a prompt) or majority vote.\nFew-shot CoT. It is to prompt the model with a few demonstrations, each containing manually written (or model-generated) high-quality reasoning chains.\nUse an iterative Monte Carlo search method to improve the best candidates by proposing semantically similar variants via prompts like Generate a variation of the following instruction while keeping the semantic meaning.\n\nInput: ...\n\nOutput:...


To construct chain-of-thought prompts automatically, Shum et al. (2023) suggested augment-prune-select, a three-step process:

Augment: Generate multiple pseudo-chains of thought given question using few-shot or zero-shot CoT prompts;
Prune: Prune pseudo chains based on whether generated answers match ground truths.
Select: Apply a variance-reduced policy gradient strategy to learn the probability distribution over selected examples, while considering the probability distribution over examples as policy and the validation set accuracy as reward.\nDefinition: Classify the sentiment of the given movie review, ""positive"" or ""negative"".
Input: i'll bet the video game is a lot more fun than the film.
Output:
Self-Consistency Sampling#
Self-consistency sampling (Wang et al. 2022a) is to sample multiple outputs with temperature > 0 and then selecting the best one out of these candidates.
The criteria for selecting the best candidate can vary from task to task. A general solution is to pick majority vote. For tasks that are easy to validate such as a programming question with unit tests, we can simply run through the interpreter and verify the correctness with unit tests.
Chain-of-Thought (CoT)#
Chain-of-thought (CoT) prompting (Wei et al. 2022) generates a sequence of short sentences to describe reasoning logics step by step, known as reasoning chains or rationales, to eventually lead to the final answer. The benefit of CoT is more pronounced for complicated reasoning tasks, while using large models (e.g. with more than 50B parameters). Simple tasks only benefit slightly from CoT prompting.
Types of CoT prompts#","The benefit of CoT prompting is more pronounced for complicated reasoning tasks, especially with large models that have more than 50B parameters. It helps break down the reasoning process step by step.",0.8,"{'relevance_score': 0.8, 'total_relevant_statements': 6, 'total_statements_in_context': 7}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.8,"{'faithfulness_score': 0.8, 'total_inferred_claims': 7, 'total_claims': 9}",8
13,How does Q-learning contribute to few-shot learning sample selection?,"There is no mention in the provided documents about Q-learning contributing to few-shot learning sample selection. The documents discuss active learning methods, contrastive learning for one training dataset, and document retrieval using Google Search for LLMs.","Rubin et al. (2022) proposed to train embeddings via contrastive learning specific to one training dataset for in-context learning sample selection.  Given each training pair $(x, y)$, the quality of one example $e_i$ (formatted input-output pair) can be measured by a conditioned probability assigned by LM: $\text{score}(e_i) = P_\text{LM}(y \mid e_i, x)$. We can identify other examples with top-$k$ and bottom-$k$ scores as positive and negative sets of candidates for every training pair and use that for contrastive learning.


Some researchers tried Q-Learning to do sample selection. (Zhang et al. 2022)


Motivated by uncertainty-based active learning, Diao et al. (2023) suggested to identify examples with high disagreement or entropy among multiple sampling trials. Then annotate these examples to be used in few-shot prompts.


Tips for Example Ordering#\nLazaridou et al. (2022) studied how to use Google Search for document retrieval to augment LLMs. Given a question $q$, clean text is extracted out of 20 URLs returned by Google, resulting in a set of documents. Because these documents are long, each document is split into paragraphs of 6 sentences, $\{p\}$. Paragraphs are ranked by TF-IDF based cosine similarity between evidence paragraphs and the query. Only the most relevant paragraph is used in the prompt to produce an answer $a$.
For closed-book QA, each demonstration is formatted as follows to construct few-shot prompts. Swapping the question with the evidence (longer distance between questions and answers) is found to consistently yield lower results across all datasets.
Evidence: ...
Question: ...
Answer: ...
The answer probability is computed in three ways:\nFew-shot CoT. It is to prompt the model with a few demonstrations, each containing manually written (or model-generated) high-quality reasoning chains.\n$$ such that $s(v)$ is low if many of $v$’s neighbors are selected and thus the scoring encourages to pick diverse samples.","Q-learning has been explored for sample selection in few-shot learning by some researchers, as mentioned by Zhang et al. (2022). It helps in identifying examples that could improve model performance based on reinforcement learning principles.",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 2, 'total_statements_in_context': 7}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 7}",0.0,"{'faithfulness_score': 0, 'total_inferred_claims': 0, 'total_claims': 2}",0
14,"What is the purpose of using the ""Let's think step by step"" prompt in CoT prompting?","The purpose of using the ""Let's think step by step"" prompt in CoT prompting is to iteratively construct a thought process by asking follow-up questions based on search engine results, which can be answered by the model itself. This helps to improve the model's ability to generate coherent and relevant responses.","Self-Ask (Press et al. 2022) is a method to repeatedly prompt the model to ask following-up questions to construct the thought process iteratively. Follow-up questions can be answered by search engine results. Similarly, IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022) and ReAct (Reason + Act; Yao et al. 2023) combines iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content and then add it back into the context.



Fig. 1. How Self-Ask works with external search queries.(Image source: Press et al. 2022).

Tree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, essentially creating a tree structure. The search process can be BFS or DFS while each state is evaluated by a classifier (via a prompt) or majority vote.\nUse an iterative Monte Carlo search method to improve the best candidates by proposing semantically similar variants via prompts like Generate a variation of the following instruction while keeping the semantic meaning.\n\nInput: ...\n\nOutput:...


To construct chain-of-thought prompts automatically, Shum et al. (2023) suggested augment-prune-select, a three-step process:

Augment: Generate multiple pseudo-chains of thought given question using few-shot or zero-shot CoT prompts;
Prune: Prune pseudo chains based on whether generated answers match ground truths.
Select: Apply a variance-reduced policy gradient strategy to learn the probability distribution over selected examples, while considering the probability distribution over examples as policy and the validation set accuracy as reward.\nFew-shot CoT. It is to prompt the model with a few demonstrations, each containing manually written (or model-generated) high-quality reasoning chains.\nPrompt Engineering | Lil'Log







































Lil'Log






















Posts




Archive




Search




Tags




FAQ




emojisearch.app









      Prompt Engineering
    
Date: March 15, 2023  |  Estimated Reading Time: 21 min  |  Author: Lilian Weng


 


Table of Contents



Basic Prompting

Zero-Shot

Few-shot

Tips for Example Selection

Tips for Example Ordering



Instruction Prompting

Self-Consistency Sampling

Chain-of-Thought (CoT)

Types of CoT prompts

Tips and Extensions


Automatic Prompt Design

Augmented Language Models

Retrieval

Programming Language

External APIs


Citation

Useful Resources

References","Using the prompt 'Let's think step by step' explicitly encourages the model to generate reasoning chains first, which helps it to break down a problem into manageable steps before arriving at the final answer.",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 2, 'total_statements_in_context': 4}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 1, 'total_claims': 2}",8
15,"What is Self-Ask, and how does it work?","Here's an answer to your question:

Self-Ask is a method that repeatedly prompts a model with follow-up questions to construct its thought process iteratively, using search engine results as answers. It combines iterative CoT prompting with queries to Wikipedia APIs for relevant entities and content.

It works by decomposing the problem into multiple thought steps, generating multiple thoughts per step, and evaluating each state using a classifier or majority vote. The model's internal knowledge is gradually updated through this process.","Self-Ask (Press et al. 2022) is a method to repeatedly prompt the model to ask following-up questions to construct the thought process iteratively. Follow-up questions can be answered by search engine results. Similarly, IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022) and ReAct (Reason + Act; Yao et al. 2023) combines iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content and then add it back into the context.



Fig. 1. How Self-Ask works with external search queries.(Image source: Press et al. 2022).

Tree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, essentially creating a tree structure. The search process can be BFS or DFS while each state is evaluated by a classifier (via a prompt) or majority vote.\nFig. 2. How Self-Ask works with external search queries.(Image source: Yao et al. 2022).
Automatic Prompt Design#
Prompt is a sequence of prefix tokens that increase the probability of getting  desired output given input. Therefore we can treat them as trainable parameters and optimize them directly on the embedding space via gradient descent, such as AutoPrompt (Shin et al., 2020, Prefix-Tuning (Li & Liang (2021)), P-tuning (Liu et al. 2021) and Prompt-Tuning (Lester et al. 2021). This section in my “Controllable Neural Text Generation” post has a good coverage of them. The trend from AutoPrompt to Prompt-Tuning is that the setup gets gradually simplified.
APE (Automatic Prompt Engineer; Zhou et al. 2022) is a method to search over a pool of model-generated instruction candidates and then filters the candidate set according to a chosen score function to ultimately choose the best candidate with highest score.\nInterestingly it is found to be beneficial even with only “internal retrieval”, that is, to generate knowledge about a topic before answering the question (Liu et al. 2022). First we can use  the following template to extract knowledge:
Generate some knowledge about the input. Examples:\nAccording to their experiments on generation and classification tasks, among three answer reranking scores - PoE > Noisy channel > RAG. Among individual probabilities, $p_\text{LM}(a \mid q, p_i)$ and $p_\text{LM}(q \mid p_i, a)$ are found to be most informative. $p_\text{LM}(q \mid p_i, a)$ captures how well the question can be explained by LM given evidence paragraph and answer and can reliably be used for reranking answer candidates.
One observation with SituatedQA dataset for questions grounded in different dates is that despite LM (pretraining cutoff is year 2020) has access to latest information via Google Search, its performance on post-2020 questions are still a lot worse than on pre-2020 questions. This suggests the existence of some discrepencies or conflicting parametric between contextual information and model internal knowledge.",Self-Ask is a method where the model is prompted to ask follow-up questions iteratively to construct a thought process. These questions can then be answered using external tools like search engines or APIs to guide the model towards a more accurate response.,0.67,"{'relevance_score': 0.67, 'total_relevant_statements': 4, 'total_statements_in_context': 6}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 2, 'total_claims': 4}",8
16,How does the Self-Ask method integrate with external tools?,"The Self-Ask method integrates with external tools through its iterative prompting approach, which combines CoT (Constructive Coherence Theory) prompting with search engine results or IRCoT (Interleaving Retrieval CoT) and ReAct (Reason + Act). This allows the model to construct thought processes iteratively by asking follow-up questions based on search results.","Self-Ask (Press et al. 2022) is a method to repeatedly prompt the model to ask following-up questions to construct the thought process iteratively. Follow-up questions can be answered by search engine results. Similarly, IRCoT (Interleaving Retrieval CoT; Trivedi et al. 2022) and ReAct (Reason + Act; Yao et al. 2023) combines iterative CoT prompting with queries to Wikipedia APIs to search for relevant entities and content and then add it back into the context.



Fig. 1. How Self-Ask works with external search queries.(Image source: Press et al. 2022).

Tree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, essentially creating a tree structure. The search process can be BFS or DFS while each state is evaluated by a classifier (via a prompt) or majority vote.\nFig. 2. How Self-Ask works with external search queries.(Image source: Yao et al. 2022).
Automatic Prompt Design#
Prompt is a sequence of prefix tokens that increase the probability of getting  desired output given input. Therefore we can treat them as trainable parameters and optimize them directly on the embedding space via gradient descent, such as AutoPrompt (Shin et al., 2020, Prefix-Tuning (Li & Liang (2021)), P-tuning (Liu et al. 2021) and Prompt-Tuning (Lester et al. 2021). This section in my “Controllable Neural Text Generation” post has a good coverage of them. The trend from AutoPrompt to Prompt-Tuning is that the setup gets gradually simplified.
APE (Automatic Prompt Engineer; Zhou et al. 2022) is a method to search over a pool of model-generated instruction candidates and then filters the candidate set according to a chosen score function to ultimately choose the best candidate with highest score.\nFig. 4. The format of API calls in TALM. (Image source: Parisi et al. 2022).
TALM adopts a self-play approach to iteratively bootstrap the dataset of tool use examples and finetune LM with it. This self-play, defined as a model interacting with a tool API, iteratively expands the dataset based on whether a newly added tool API can improve the model outputs. Same idea is adopted in Toolformer too, described in more details below. The pipeline loosely mimics a RL process where LM is the policy network and it is trained by policy gradient with a binary reward signal.

Fig. 5. Self-play iterations help boost the model performance.(Image source: Parisi et al. 2022).
Toolformer (Schick et al. 2023) is a LM that can use external tools via simple APIs, which is built in a self-supervised manner and only requires a handful of demonstrations for each API. The toolbox of Toolformer includes:\nAugmented Language Models#
A survey on augmented language models by Mialon et al. (2023) has great coverage over multiple categories of language models augmented with reasoning skills and the ability of using external tools. Recommend it.
Retrieval#
Often we need to complete tasks that require latest knowledge after the model pretraining time cutoff or internal/private knowledge base. In that case, the model would not know the context if we don’t explicitly provide it in the prompt. Many methods for Open Domain Question Answering depend on first doing retrieval over a knowledge base and then incorporating the retrieved content as part of the prompt. The accuracy of such a process depends on the quality of both retrieval and generation steps.","Self-Ask can be combined with methods like IRCoT (Interleaving Retrieval CoT) and ReAct (Reason + Act), where the model uses external tools like Wikipedia APIs to retrieve relevant information and add it back into the context for reasoning.",0.5,"{'relevance_score': 0.5, 'total_relevant_statements': 2, 'total_statements_in_context': 4}",0.5,"{'recall_score': 0.5, 'total_attributed_statements': 2, 'total_statements_in_reference': 4}",0.5,"{'faithfulness_score': 0.5, 'total_inferred_claims': 2, 'total_claims': 4}",8
